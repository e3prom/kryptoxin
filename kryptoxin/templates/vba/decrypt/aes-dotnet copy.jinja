{# aes-dotnet.jinja #}
{#
    This Jinja2 template includes the VBA decryption routines.
    It leverages the .NET System.Security.Cryptography class for AES decryption

    ** NOT YET IMPLEMENTED - EXPERIMENTAL **
#}
Function PBKDF2(password As String, salt() As Byte, iterations As Integer, keySize As Integer) As Byte()
    ' Declare variables
    Dim pbkdf2 As Object
    Dim passwordBytes() As Byte
    Dim key() As Byte
    
    ' Convert password to byte array
    passwordBytes = StrConv(password, vbFromUnicode)
    
    ' Create PBKDF2 object
    Set pbkdf2 = CreateObject("System.Security.Cryptography.Rfc2898DeriveBytes")
    pbkdf2.Initialize(passwordBytes, salt, iterations)
    
    ' Derive key
    key = pbkdf2.GetBytes(keySize)
    
    ' Return key
    PBKDF2 = key
    
End Function

Function DecodeAES_PBKDF2() As Byte()
    ' Declare variables
    Dim password As String
    Dim salt() As Byte
    Dim iterations As Integer
    Dim keySize As Integer
    Dim aesIV() As Byte
    Dim encryptedData() As Byte
    Dim decryptedData() As Byte
    Dim aes As Object
    Dim key() As Byte
    
    ' Set password, salt, iterations, key size, IV, and encrypted data
    password = "{{ password }}"
    salt = Array({{ salt }})
    iterations = {{ iter }}
    keySize = {{ int(key_size / 8) }}
    aesIV = Array({{ iv }})
    encryptedData = Array({{ ciphertext }})
    
    ' Derive key using PBKDF2
    key = PBKDF2(password, salt, iterations, keySize)
    
    ' Create AES object
    Set aes = CreateObject("System.Security.Cryptography.AesManaged")
    aes.Mode = 1 ' CBC mode
    aes.Padding = 2 ' PKCS#7 padding
    aes.KeySize = {{ key_size }}
    aes.BlockSize = 128
    
    ' Set key and IV
    aes.Key = key
    aes.IV = aesIV
    
    ' Decrypt data
    decryptedData = aes.CreateDecryptor().TransformFinalBlock(encryptedData, 0, UBound(encryptedData) + 1)
    
    ' Return decrypted data
    DecodeAES_PBKDF2 = decryptedData
    
End Function
